import React, { useEffect, useState } from 'react';
import './StatusCount.css';

const StatusCounts = () => {
	const [slowdowns, setSlowdowns] = useState([]);
	const [absents, setAbsents] = useState([]);
	const [idles, setIdles] = useState([]);
	const [showSlowdowns, setShowSlowdowns] = useState(false);
	const [showAbsents, setShowAbsents] = useState(false);
	const [showIdles, setShowIdles] = useState(false);

	// You can replace the hardcoded data with your logic here
	useEffect(() => {
		// Replace these dummy arrays with your logic
		const slowdownsData = ['Person A', 'Person B', 'Person C'];
		const absentsData = ['Person D', 'Person E'];
		const idlesData = ['Person F', 'Person G'];

		setSlowdowns(slowdownsData);
		setAbsents(absentsData);
		setIdles(idlesData);
	}, []);

	return (
		<div className='drive container-fluid status-count'>
			<div
				className='row'
				style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around' }}
			>
				<div className='drive-div-container col-md-2 col-3'>
					<div
						className={`driveDiv1 slowdowns-box ${showSlowdowns ? 'active' : ''}`}
						style={{
							// backgroundColor: '#ECAF02',
							padding: '1rem 1.5rem',
							cursor: 'pointer'
						}}
						onClick={() => setShowSlowdowns(!showSlowdowns)}
					>
						<div className='driveDiv1text1' style={{ display: 'flex', justifyContent: 'space-between' }}>
							{slowdowns.length}
							<div>
								<svg
									width='16'
									height='26'
									viewBox='0 0 16 26'
									fill='none'
									xmlns='http://www.w3.org/2000/svg'
								>
									<path
										d='M15.9657 18.8606C15.9807 18.8153 15.9899 18.7683 15.9929 18.7206C15.9937 18.7081 16.0001 18.6963 16.0001 18.6838V5.61948C16.0001 5.46884 15.9403 5.32437 15.8337 5.21784C15.7272 5.11132 15.5827 5.05147 15.4321 5.05146H8.61593V3.81077C8.99493 3.67677 9.31437 3.41311 9.51777 3.06637C9.72118 2.71964 9.79546 2.31216 9.72748 1.91595C9.65951 1.51975 9.45365 1.16033 9.14631 0.90122C8.83896 0.642113 8.4499 0.5 8.04791 0.5C7.64592 0.5 7.25686 0.642113 6.94952 0.90122C6.64217 1.16033 6.43632 1.51975 6.36834 1.91595C6.30036 2.31216 6.37464 2.71964 6.57805 3.06637C6.78145 3.41311 7.10089 3.67677 7.47989 3.81077V5.05146H0.663721C0.513075 5.05147 0.368602 5.11132 0.262079 5.21784C0.155556 5.32436 0.0957095 5.46883 0.0957031 5.61948V24.932C0.0957095 25.0826 0.155556 25.2271 0.262079 25.3336C0.368602 25.4401 0.513075 25.5 0.663721 25.5H9.18394C9.25757 25.4999 9.3305 25.4856 9.39865 25.4577L9.40034 25.4569C9.4696 25.4284 9.53253 25.3865 9.58551 25.3336L15.8337 19.0854C15.8804 19.0371 15.9181 18.9807 15.9449 18.9191C15.9481 18.9121 15.9542 18.9067 15.9571 18.8995C15.9623 18.887 15.9615 18.8734 15.9657 18.8606ZM8.04791 1.64338C8.16025 1.64338 8.27007 1.67669 8.36349 1.73911C8.4569 1.80152 8.5297 1.89023 8.57269 1.99403C8.61568 2.09782 8.62693 2.21203 8.60501 2.32221C8.5831 2.4324 8.529 2.53361 8.44956 2.61305C8.37012 2.69249 8.26891 2.74658 8.15872 2.7685C8.04854 2.79042 7.93433 2.77917 7.83053 2.73617C7.72674 2.69318 7.63803 2.62037 7.57562 2.52696C7.5132 2.43355 7.47989 2.32373 7.47989 2.21139C7.48009 2.0608 7.54 1.91644 7.64648 1.80996C7.75296 1.70348 7.89732 1.64357 8.04791 1.64338ZM1.23173 6.18749H7.47989V7.32352C7.47989 7.47417 7.53974 7.61864 7.64626 7.72517C7.75279 7.83169 7.89726 7.89154 8.04791 7.89154C8.19856 7.89154 8.34304 7.83169 8.44956 7.72517C8.55608 7.61864 8.61593 7.47417 8.61593 7.32352V6.18749H14.8641V18.1158H9.18394C9.03329 18.1158 8.88882 18.1757 8.7823 18.2822C8.67578 18.3887 8.61594 18.5332 8.61593 18.6838V24.364H1.23173V6.18749ZM9.75196 23.5608V19.2518H14.0609L9.75196 23.5608Z'
										fill='white'
									/>
									<path
										d='M3.50339 10.7308H12.5916C12.7419 10.7302 12.8858 10.6701 12.9919 10.5636C13.098 10.4572 13.1575 10.313 13.1575 10.1627C13.1575 10.0125 13.098 9.86831 12.9919 9.76184C12.8858 9.65538 12.7419 9.59529 12.5916 9.59473H3.50339C3.35311 9.59529 3.20918 9.65538 3.10312 9.76184C2.99705 9.86831 2.9375 10.0125 2.9375 10.1627C2.9375 10.313 2.99705 10.4572 3.10312 10.5636C3.20918 10.6701 3.35311 10.7302 3.50339 10.7308Z'
										fill='white'
									/>
									<path
										d='M3.50357 13.5716H12.5918C12.7425 13.5716 12.8869 13.5117 12.9935 13.4052C13.1 13.2987 13.1598 13.1542 13.1598 13.0036C13.1598 12.8529 13.1 12.7084 12.9935 12.6019C12.8869 12.4954 12.7425 12.4355 12.5918 12.4355H3.50357C3.35292 12.4355 3.20844 12.4954 3.10192 12.6019C2.99539 12.7084 2.93555 12.8529 2.93555 13.0036C2.93555 13.1542 2.99539 13.2987 3.10192 13.4052C3.20844 13.5117 3.35292 13.5716 3.50357 13.5716Z'
										fill='white'
									/>
									<path
										d='M8.61553 15.8444C8.61552 15.6937 8.55568 15.5493 8.44915 15.4427C8.34263 15.3362 8.19816 15.2764 8.04751 15.2764H3.50339C3.35311 15.2769 3.20918 15.337 3.10312 15.4435C2.99705 15.5499 2.9375 15.6941 2.9375 15.8444C2.9375 15.9947 2.99705 16.1388 3.10312 16.2453C3.20918 16.3517 3.35311 16.4118 3.50339 16.4124H8.04751C8.19816 16.4124 8.34263 16.3525 8.44915 16.246C8.55568 16.1395 8.61552 15.995 8.61553 15.8444Z'
										fill='white'
									/>
								</svg>
							</div>
						</div>
						<div className='driveDiv1text2' style={{ display: 'flex', justifyContent: 'start' }}>Slowdowns</div>
					</div>
					{showSlowdowns && <div className='hover-names'>{slowdowns.join(', ')}</div>}
				</div>

				<div className='drive-div-container col-md-2 col-3'>
					<div
						className={`driveDiv1 absents-box ${showAbsents ? 'active' : ''}`}
						style={{
							// backgroundColor: '#CC0000',
							padding: '1rem 1.5rem',
							cursor: 'pointer'
						}}
						onClick={() => setShowAbsents(!showAbsents)}
					>
						<div className='driveDiv1text1' style={{ display: 'flex', justifyContent: 'space-between' }}>
							{absents.length}
							<div>
								<svg
									width='16'
									height='26'
									viewBox='0 0 16 26'
									fill='none'
									xmlns='http://www.w3.org/2000/svg'
								>
									<path
										d='M15.9657 18.8606C15.9807 18.8153 15.9899 18.7683 15.9929 18.7206C15.9937 18.7081 16.0001 18.6963 16.0001 18.6838V5.61948C16.0001 5.46884 15.9403 5.32437 15.8337 5.21784C15.7272 5.11132 15.5827 5.05147 15.4321 5.05146H8.61593V3.81077C8.99493 3.67677 9.31437 3.41311 9.51777 3.06637C9.72118 2.71964 9.79546 2.31216 9.72748 1.91595C9.65951 1.51975 9.45365 1.16033 9.14631 0.90122C8.83896 0.642113 8.4499 0.5 8.04791 0.5C7.64592 0.5 7.25686 0.642113 6.94952 0.90122C6.64217 1.16033 6.43632 1.51975 6.36834 1.91595C6.30036 2.31216 6.37464 2.71964 6.57805 3.06637C6.78145 3.41311 7.10089 3.67677 7.47989 3.81077V5.05146H0.663721C0.513075 5.05147 0.368602 5.11132 0.262079 5.21784C0.155556 5.32436 0.0957095 5.46883 0.0957031 5.61948V24.932C0.0957095 25.0826 0.155556 25.2271 0.262079 25.3336C0.368602 25.4401 0.513075 25.5 0.663721 25.5H9.18394C9.25757 25.4999 9.3305 25.4856 9.39865 25.4577L9.40034 25.4569C9.4696 25.4284 9.53253 25.3865 9.58551 25.3336L15.8337 19.0854C15.8804 19.0371 15.9181 18.9807 15.9449 18.9191C15.9481 18.9121 15.9542 18.9067 15.9571 18.8995C15.9623 18.887 15.9615 18.8734 15.9657 18.8606ZM8.04791 1.64338C8.16025 1.64338 8.27007 1.67669 8.36349 1.73911C8.4569 1.80152 8.5297 1.89023 8.57269 1.99403C8.61568 2.09782 8.62693 2.21203 8.60501 2.32221C8.5831 2.4324 8.529 2.53361 8.44956 2.61305C8.37012 2.69249 8.26891 2.74658 8.15872 2.7685C8.04854 2.79042 7.93433 2.77917 7.83053 2.73617C7.72674 2.69318 7.63803 2.62037 7.57562 2.52696C7.5132 2.43355 7.47989 2.32373 7.47989 2.21139C7.48009 2.0608 7.54 1.91644 7.64648 1.80996C7.75296 1.70348 7.89732 1.64357 8.04791 1.64338ZM1.23173 6.18749H7.47989V7.32352C7.47989 7.47417 7.53974 7.61864 7.64626 7.72517C7.75279 7.83169 7.89726 7.89154 8.04791 7.89154C8.19856 7.89154 8.34304 7.83169 8.44956 7.72517C8.55608 7.61864 8.61593 7.47417 8.61593 7.32352V6.18749H14.8641V18.1158H9.18394C9.03329 18.1158 8.88882 18.1757 8.7823 18.2822C8.67578 18.3887 8.61594 18.5332 8.61593 18.6838V24.364H1.23173V6.18749ZM9.75196 23.5608V19.2518H14.0609L9.75196 23.5608Z'
										fill='white'
									/>
									<path
										d='M3.50339 10.7308H12.5916C12.7419 10.7302 12.8858 10.6701 12.9919 10.5636C13.098 10.4572 13.1575 10.313 13.1575 10.1627C13.1575 10.0125 13.098 9.86831 12.9919 9.76184C12.8858 9.65538 12.7419 9.59529 12.5916 9.59473H3.50339C3.35311 9.59529 3.20918 9.65538 3.10312 9.76184C2.99705 9.86831 2.9375 10.0125 2.9375 10.1627C2.9375 10.313 2.99705 10.4572 3.10312 10.5636C3.20918 10.6701 3.35311 10.7302 3.50339 10.7308Z'
										fill='white'
									/>
									<path
										d='M3.50357 13.5716H12.5918C12.7425 13.5716 12.8869 13.5117 12.9935 13.4052C13.1 13.2987 13.1598 13.1542 13.1598 13.0036C13.1598 12.8529 13.1 12.7084 12.9935 12.6019C12.8869 12.4954 12.7425 12.4355 12.5918 12.4355H3.50357C3.35292 12.4355 3.20844 12.4954 3.10192 12.6019C2.99539 12.7084 2.93555 12.8529 2.93555 13.0036C2.93555 13.1542 2.99539 13.2987 3.10192 13.4052C3.20844 13.5117 3.35292 13.5716 3.50357 13.5716Z'
										fill='white'
									/>
									<path
										d='M8.61553 15.8444C8.61552 15.6937 8.55568 15.5493 8.44915 15.4427C8.34263 15.3362 8.19816 15.2764 8.04751 15.2764H3.50339C3.35311 15.2769 3.20918 15.337 3.10312 15.4435C2.99705 15.5499 2.9375 15.6941 2.9375 15.8444C2.9375 15.9947 2.99705 16.1388 3.10312 16.2453C3.20918 16.3517 3.35311 16.4118 3.50339 16.4124H8.04751C8.19816 16.4124 8.34263 16.3525 8.44915 16.246C8.55568 16.1395 8.61552 15.995 8.61553 15.8444Z'
										fill='white'
									/>
								</svg>
							</div>
						</div>
						<div className='driveDiv1text2' style={{ display: 'flex', justifyContent: 'start' }}>Absents</div>
					</div>
					{showAbsents && <div className='hover-names'>{absents.join(', ')}</div>}
				</div>

				<div className='drive-div-container col-md-2 col-3'>
					<div
						className={`driveDiv1 idlesBox ${showIdles ? 'active' : ''}`}
						style={{
							padding: '1rem 1.5rem',
							position: 'relative',
						}}
						onClick={() => setShowIdles(!showIdles)}
					>
						<div
							className='driveDiv1text1'
							style={{ display: 'flex', justifyContent: 'space-between' }}
						>
							{idles.length}
							<div>
								<svg
									width='16'
									height='26'
									viewBox='0 0 16 26'
									fill='none'
									xmlns='http://www.w3.org/2000/svg'
								>
									<path
										d='M15.9657 18.8606C15.9807 18.8153 15.9899 18.7683 15.9929 18.7206C15.9937 18.7081 16.0001 18.6963 16.0001 18.6838V5.61948C16.0001 5.46884 15.9403 5.32437 15.8337 5.21784C15.7272 5.11132 15.5827 5.05147 15.4321 5.05146H8.61593V3.81077C8.99493 3.67677 9.31437 3.41311 9.51777 3.06637C9.72118 2.71964 9.79546 2.31216 9.72748 1.91595C9.65951 1.51975 9.45365 1.16033 9.14631 0.90122C8.83896 0.642113 8.4499 0.5 8.04791 0.5C7.64592 0.5 7.25686 0.642113 6.94952 0.90122C6.64217 1.16033 6.43632 1.51975 6.36834 1.91595C6.30036 2.31216 6.37464 2.71964 6.57805 3.06637C6.78145 3.41311 7.10089 3.67677 7.47989 3.81077V5.05146H0.663721C0.513075 5.05147 0.368602 5.11132 0.262079 5.21784C0.155556 5.32436 0.0957095 5.46883 0.0957031 5.61948V24.932C0.0957095 25.0826 0.155556 25.2271 0.262079 25.3336C0.368602 25.4401 0.513075 25.5 0.663721 25.5H9.18394C9.25757 25.4999 9.3305 25.4856 9.39865 25.4577L9.40034 25.4569C9.4696 25.4284 9.53253 25.3865 9.58551 25.3336L15.8337 19.0854C15.8804 19.0371 15.9181 18.9807 15.9449 18.9191C15.9481 18.9121 15.9542 18.9067 15.9571 18.8995C15.9623 18.887 15.9615 18.8734 15.9657 18.8606ZM8.04791 1.64338C8.16025 1.64338 8.27007 1.67669 8.36349 1.73911C8.4569 1.80152 8.5297 1.89023 8.57269 1.99403C8.61568 2.09782 8.62693 2.21203 8.60501 2.32221C8.5831 2.4324 8.529 2.53361 8.44956 2.61305C8.37012 2.69249 8.26891 2.74658 8.15872 2.7685C8.04854 2.79042 7.93433 2.77917 7.83053 2.73617C7.72674 2.69318 7.63803 2.62037 7.57562 2.52696C7.5132 2.43355 7.47989 2.32373 7.47989 2.21139C7.48009 2.0608 7.54 1.91644 7.64648 1.80996C7.75296 1.70348 7.89732 1.64357 8.04791 1.64338ZM1.23173 6.18749H7.47989V7.32352C7.47989 7.47417 7.53974 7.61864 7.64626 7.72517C7.75279 7.83169 7.89726 7.89154 8.04791 7.89154C8.19856 7.89154 8.34304 7.83169 8.44956 7.72517C8.55608 7.61864 8.61593 7.47417 8.61593 7.32352V6.18749H14.8641V18.1158H9.18394C9.03329 18.1158 8.88882 18.1757 8.7823 18.2822C8.67578 18.3887 8.61594 18.5332 8.61593 18.6838V24.364H1.23173V6.18749ZM9.75196 23.5608V19.2518H14.0609L9.75196 23.5608Z'
										fill='white'
									/>
									<path
										d='M3.50339 10.7308H12.5916C12.7419 10.7302 12.8858 10.6701 12.9919 10.5636C13.098 10.4572 13.1575 10.313 13.1575 10.1627C13.1575 10.0125 13.098 9.86831 12.9919 9.76184C12.8858 9.65538 12.7419 9.59529 12.5916 9.59473H3.50339C3.35311 9.59529 3.20918 9.65538 3.10312 9.76184C2.99705 9.86831 2.9375 10.0125 2.9375 10.1627C2.9375 10.313 2.99705 10.4572 3.10312 10.5636C3.20918 10.6701 3.35311 10.7302 3.50339 10.7308Z'
										fill='white'
									/>
									<path
										d='M3.50357 13.5716H12.5918C12.7425 13.5716 12.8869 13.5117 12.9935 13.4052C13.1 13.2987 13.1598 13.1542 13.1598 13.0036C13.1598 12.8529 13.1 12.7084 12.9935 12.6019C12.8869 12.4954 12.7425 12.4355 12.5918 12.4355H3.50357C3.35292 12.4355 3.20844 12.4954 3.10192 12.6019C2.99539 12.7084 2.93555 12.8529 2.93555 13.0036C2.93555 13.1542 2.99539 13.2987 3.10192 13.4052C3.20844 13.5117 3.35292 13.5716 3.50357 13.5716Z'
										fill='white'
									/>
									<path
										d='M8.61553 15.8444C8.61552 15.6937 8.55568 15.5493 8.44915 15.4427C8.34263 15.3362 8.19816 15.2764 8.04751 15.2764H3.50339C3.35311 15.2769 3.20918 15.337 3.10312 15.4435C2.99705 15.5499 2.9375 15.6941 2.9375 15.8444C2.9375 15.9947 2.99705 16.1388 3.10312 16.2453C3.20918 16.3517 3.35311 16.4118 3.50339 16.4124H8.04751C8.19816 16.4124 8.34263 16.3525 8.44915 16.246C8.55568 16.1395 8.61552 15.995 8.61553 15.8444Z'
										fill='white'
									/>
								</svg>
							</div>
						</div>
						<div className='driveDiv1text2' style={{ display: 'flex', justifyContent: 'start' }}>
							Idles
						</div>
					</div>
					{showIdles && <div className='hover-names'>{idles.join(', ')}</div>}
				</div>
			</div>
		</div>
	);
};

export default StatusCounts;

/* <svg
                  width='16'
                  height='26'
                  viewBox='0 0 16 26'
                  fill='none'
                  xmlns='http://www.w3.org/2000/svg'
                >
                  <path
                    d='M15.9657 18.8606C15.9807 18.8153 15.9899 18.7683 15.9929 18.7206C15.9937 18.7081 16.0001 18.6963 16.0001 18.6838V5.61948C16.0001 5.46884 15.9403 5.32437 15.8337 5.21784C15.7272 5.11132 15.5827 5.05147 15.4321 5.05146H8.61593V3.81077C8.99493 3.67677 9.31437 3.41311 9.51777 3.06637C9.72118 2.71964 9.79546 2.31216 9.72748 1.91595C9.65951 1.51975 9.45365 1.16033 9.14631 0.90122C8.83896 0.642113 8.4499 0.5 8.04791 0.5C7.64592 0.5 7.25686 0.642113 6.94952 0.90122C6.64217 1.16033 6.43632 1.51975 6.36834 1.91595C6.30036 2.31216 6.37464 2.71964 6.57805 3.06637C6.78145 3.41311 7.10089 3.67677 7.47989 3.81077V5.05146H0.663721C0.513075 5.05147 0.368602 5.11132 0.262079 5.21784C0.155556 5.32436 0.0957095 5.46883 0.0957031 5.61948V24.932C0.0957095 25.0826 0.155556 25.2271 0.262079 25.3336C0.368602 25.4401 0.513075 25.5 0.663721 25.5H9.18394C9.25757 25.4999 9.3305 25.4856 9.39865 25.4577L9.40034 25.4569C9.4696 25.4284 9.53253 25.3865 9.58551 25.3336L15.8337 19.0854C15.8804 19.0371 15.9181 18.9807 15.9449 18.9191C15.9481 18.9121 15.9542 18.9067 15.9571 18.8995C15.9623 18.887 15.9615 18.8734 15.9657 18.8606ZM8.04791 1.64338C8.16025 1.64338 8.27007 1.67669 8.36349 1.73911C8.4569 1.80152 8.5297 1.89023 8.57269 1.99403C8.61568 2.09782 8.62693 2.21203 8.60501 2.32221C8.5831 2.4324 8.529 2.53361 8.44956 2.61305C8.37012 2.69249 8.26891 2.74658 8.15872 2.7685C8.04854 2.79042 7.93433 2.77917 7.83053 2.73617C7.72674 2.69318 7.63803 2.62037 7.57562 2.52696C7.5132 2.43355 7.47989 2.32373 7.47989 2.21139C7.48009 2.0608 7.54 1.91644 7.64648 1.80996C7.75296 1.70348 7.89732 1.64357 8.04791 1.64338ZM1.23173 6.18749H7.47989V7.32352C7.47989 7.47417 7.53974 7.61864 7.64626 7.72517C7.75279 7.83169 7.89726 7.89154 8.04791 7.89154C8.19856 7.89154 8.34304 7.83169 8.44956 7.72517C8.55608 7.61864 8.61593 7.47417 8.61593 7.32352V6.18749H14.8641V18.1158H9.18394C9.03329 18.1158 8.88882 18.1757 8.7823 18.2822C8.67578 18.3887 8.61594 18.5332 8.61593 18.6838V24.364H1.23173V6.18749ZM9.75196 23.5608V19.2518H14.0609L9.75196 23.5608Z'
                    fill='white'
                  />
                  <path
                    d='M3.50339 10.7308H12.5916C12.7419 10.7302 12.8858 10.6701 12.9919 10.5636C13.098 10.4572 13.1575 10.313 13.1575 10.1627C13.1575 10.0125 13.098 9.86831 12.9919 9.76184C12.8858 9.65538 12.7419 9.59529 12.5916 9.59473H3.50339C3.35311 9.59529 3.20918 9.65538 3.10312 9.76184C2.99705 9.86831 2.9375 10.0125 2.9375 10.1627C2.9375 10.313 2.99705 10.4572 3.10312 10.5636C3.20918 10.6701 3.35311 10.7302 3.50339 10.7308Z'
                    fill='white'
                  />
                  <path
                    d='M3.50357 13.5716H12.5918C12.7425 13.5716 12.8869 13.5117 12.9935 13.4052C13.1 13.2987 13.1598 13.1542 13.1598 13.0036C13.1598 12.8529 13.1 12.7084 12.9935 12.6019C12.8869 12.4954 12.7425 12.4355 12.5918 12.4355H3.50357C3.35292 12.4355 3.20844 12.4954 3.10192 12.6019C2.99539 12.7084 2.93555 12.8529 2.93555 13.0036C2.93555 13.1542 2.99539 13.2987 3.10192 13.4052C3.20844 13.5117 3.35292 13.5716 3.50357 13.5716Z'
                    fill='white'
                  />
                  <path
                    d='M8.61553 15.8444C8.61552 15.6937 8.55568 15.5493 8.44915 15.4427C8.34263 15.3362 8.19816 15.2764 8.04751 15.2764H3.50339C3.35311 15.2769 3.20918 15.337 3.10312 15.4435C2.99705 15.5499 2.9375 15.6941 2.9375 15.8444C2.9375 15.9947 2.99705 16.1388 3.10312 16.2453C3.20918 16.3517 3.35311 16.4118 3.50339 16.4124H8.04751C8.19816 16.4124 8.34263 16.3525 8.44915 16.246C8.55568 16.1395 8.61552 15.995 8.61553 15.8444Z'
                    fill='white'
                  />
                </svg> */

// import React, { useEffect, useState } from 'react';

// const StatusCounts = ({ allusers }) => {
//   const [statusCounts, setStatusCounts] = useState({
//     slowdowns: 3,
//     absents: 2,
//     idles: 2,
//   });

//   // Calculate Slowdowns, Absents, and Idles based on color-coding
//   useEffect(() => {
//     if (allusers && allusers.users) {
//       const slowdowns = allusers.users.filter((user) => user.color === '#ECAF02').length;
//       const absents = allusers.users.filter((user) => user.color === '#CC0000').length;
//       const idles = allusers.users.filter((user) => user.color === '#13B497').length;

//       setStatusCounts({
//         slowdowns: slowdowns || 3,
//         absents: absents || 2,
//         idles: idles || 2,
//       });
//     }
//   }, [allusers]);

//   return (
//     <div className="drive container-fluid">
//       <div className="row" style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around' }}>
//         <div className="drive-div-container col-md-2 col-3">
//           <div className="driveDiv1" style={{ backgroundColor: '#ECAF02' }}>
//             <div className="driveDiv1text1" style={{ display: 'flex', justifyContent: 'center' }}>
//               {statusCounts.slowdowns}
//             </div>
//             <div className="driveDiv1text2">Slowdowns</div>
//           </div>
//         </div>

//         <div className="drive-div-container col-md-2 col-3">
//           <div className="driveDiv1" style={{ backgroundColor: '#CC0000' }}>
//             <div className="driveDiv1text1" style={{ display: 'flex', justifyContent: 'center' }}>
//               {statusCounts.absents}
//             </div>
//             <div className="driveDiv1text2">Absents</div>
//           </div>
//         </div>

//         <div className="drive-div-container col-md-2 col-3">
//           <div className="driveDiv1" style={{ backgroundColor: '#13B497' }}>
//             <div className="driveDiv1text1" style={{ display: 'flex', justifyContent: 'center' }}>
//               {statusCounts.idles}
//             </div>
//             <div className="driveDiv1text2">Idles</div>
//           </div>
//         </div>
//       </div>

//       {/* Display Slowdowns, Absents, and Idles at the bottom */}
//       <div className="status-texts">
//         {statusCounts.slowdowns > 0 && (
//           <div>
//             {statusCounts.slowdowns} Slowdowns: {getUsersByColor(allusers, '#ECAF02').join(', ')}
//           </div>
//         )}
//         {statusCounts.absents > 0 && (
//           <div>
//             {statusCounts.absents} Absents: {getUsersByColor(allusers, '#CC0000').join(', ')}
//           </div>
//         )}
//         {statusCounts.idles > 0 && (
//           <div>
//             {statusCounts.idles} Idles: {getUsersByColor(allusers, '#13B497').join(', ')}
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };

// // Helper function to get users by color
// const getUsersByColor = (allusers, color) => {
//   if (allusers && allusers.users) {
//     return allusers.users.filter((user) => user.color === color).map((user) => user.name);
//   }
//   return [];
// };

// export default StatusCounts;
